#
# Scalien Makefile for Linux
#

#
# directories
#
BASE_DIR = .
SCALIEN_DIR = ../scalien

SCRIPT_DIR = $(BASE_DIR)/scripts
DIST_DIR = $(BASE_DIR)/dist
PACKAGE_DIR = $(BASE_DIR)/packages
PACKAGE_FILE = scalien.deb
PACKAGE_REPOSITORY = /mnt/data1/apache2/debian

BUILD_ROOT = $(BASE_DIR)/build
SRC_DIR = $(BASE_DIR)/src
DEB_DIR = $(BUILD_ROOT)/deb

BUILD_DEBUG_DIR = $(BUILD_ROOT)/debug
BUILD_RELEASE_DIR = $(BUILD_ROOT)/release

#
# compiler/linker options
#
CC = gcc
CXX = g++

INCLUDE = \
	-I$(SCALIEN_DIR)/src \

BASE_CFLAGS = -Wall $(INCLUDE)
BASE_CXXFLAGS = $(BASE_CFLAGS)
BASE_LDFLAGS = -lpthread -lrt -ldl

DEBUG_CFLAGS = -g -DDEBUG_SUPPORT #-pg
DEBUG_LDFLAGS = #-pg -lc_p

RELEASE_CFLAGS = -O3 #-g

# default to debug build
ifneq ($(BUILD), release)
BUILD_DIR = $(BUILD_DEBUG_DIR)
CFLAGS = $(BASE_CFLAGS) $(DEBUG_CFLAGS)
CXXFLAGS = $(BASE_CXXFLAGS) $(DEBUG_CFLAGS)
LDFLAGS = $(BASE_LDFLAGS) $(DEBUG_LDFLAGS)
else
BUILD_DIR = $(BUILD_RELEASE_DIR)
CFLAGS = $(BASE_CFLAGS) $(RELEASE_CFLAGS)
CXXFLAGS = $(BASE_CXXFLAGS) $(RELEASE_CFLAGS)
LDFLAGS = $(BASE_LDFLAGS) $(RELEASE_LDFLAGS)
endif


##############################################################################
#
# Targets
#
##############################################################################

all: debug

debug:
	$(MAKE) targets BUILD="debug"

release:
	$(MAKE) targets BUILD="release"
	
targets: $(BUILD_DIR) $(BASE_DIR)/scalien


##############################################################################
#
# Build rules
#
##############################################################################

SCALIEN_LIBS =
	
FRAMEWORK_OBJECTS = \
	$(BUILD_DIR)/Framework/Events/Scheduler.o \
	$(BUILD_DIR)/Framework/IO/Endpoint.o \
	$(BUILD_DIR)/Framework/IO/IOProc_Linux.o \
	$(BUILD_DIR)/Framework/IO/Socket.o \
	$(BUILD_DIR)/Framework/Log.o \
	$(BUILD_DIR)/Framework/Common.o \

OBJECTS = \
	$(FRAMEWORK_OBJECTS) \
	$(BUILD_DIR)/Main.o

LIBS = \
	$(SCALIEN_LIBS)

$(BUILD_DIR):
	-mkdir -p $(BUILD_DIR) \
		$(BUILD_DIR)/Framework \
		$(BUILD_DIR)/Framework/Events \
		$(BUILD_DIR)/Framework/IO \

$(SCALIEN_LIBS):
	cd $(SCALIEN_DIR); $(MAKE) targets BUILD=$(BUILD)
	
$(BASE_DIR)/scalien: $(LIBS) $(OBJECTS)
	$(CXX) $(LDFLAGS) -o $@ $(OBJECTS) $(LIBS)

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) $(INCLUDE) -o $@ -c $<

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDE) -o $@ -c $<


##############################################################################
#
# Clean
#
##############################################################################

clean: clean-debug clean-release
	-rm -r -f $(BUILD_ROOT)

clean-debug:
	-rm -f $(BASE_DIR)/scalien
	-rm -r -f $(BUILD_DEBUG_DIR)
	
clean-release:
	-rm -f $(BASE_DIR)/scalien
	-rm -r -f $(BUILD_RELEASE_DIR)
	
clean-libs: clean-scalien clean-libresample clean-resiprocate clean-speex

clean-scalien:
	cd $(SCALIEN_DIR); $(MAKE) clean

clean-resiprocate:
	cd $(RESIPROCATE_DIR); $(MAKE) clean

clean-libresample:
	cd $(LIBRESAMPLE_DIR); $(MAKE) clean

clean-speex:
	cd $(SPEEX_DIR); $(MAKE) clean

distclean: clean distclean-libs

distclean-libs: distclean-scalien distclean-libresample distclean-speex

distclean-scalien:
	cd $(SCALIEN_DIR); $(MAKE) distclean

distclean-resiprocate:
	cd $(RESIPROCATE_DIR); $(MAKE) distclean

distclean-libresample:
	cd $(LIBRESAMPLE_DIR); $(MAKE) distclean

distclean-speex:
	cd $(SPEEX_DIR); $(MAKE) distclean


##############################################################################
#
# Build packages
#
##############################################################################

deb: release
	-mkdir -p $(DEB_DIR)/etc/init.d
	-mkdir -p $(DEB_DIR)/usr/sbin
	-cp -fr $(PACKAGE_DIR)/DEBIAN $(DEB_DIR)
	-cp -fr $(SCRIPT_DIR)/scalien.cfg $(DEB_DIR)/etc
	-cp -fr $(SCRIPT_DIR)/scalien $(DEB_DIR)/etc/init.d
	-cp -fr $(SCRIPT_DIR)/safe_scalien $(DEB_DIR)/usr/sbin
	-cp -fr $(BASE_DIR)/scalien $(DEB_DIR)/usr/sbin
	-rm -f $(BUILD_ROOT)/.*
	-mkdir -p $(DIST_DIR)
	-rm -f $(DIST_DIR)/$(PACKAGE_FILE)
	-cd $(DIST_DIR)
	-fakeroot dpkg -b $(DEB_DIR) $(DIST_DIR)/$(PACKAGE_FILE)

deb-install: deb
	-sudo reprepro -Vb $(PACKAGE_REPOSITORY) includedeb etch $(DIST_DIR)/$(PACKAGE_FILE)
